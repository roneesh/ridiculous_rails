= render 'header'

%section.problem-and-solution.clearfix
  %section.challenge.clearfix
    .the-latest-challenge
      %h3.challenge-title The Latest Challenge - The API Powered Calculator
      %p.challenge-date posted on: Friday October 21, 2013
      %p What is the API powered calculator? Well it's lots of things! For starters, it's a calculator. For not starters it's a calculator that borrows all it's numbers from an API, and has none of it's own. For next starters, it's a really pointless fun way to learn Javascript, jquery, ajax and API's in one big go.
      %p Why should you care? Well, API's are the future baby, and instead of just learning how to access one, why not learn how to serve one? That way when someone asks if you can access API's you can reply, "Oh yeah, but I tend to just make my own."
      %p The steps to complete this project:
      %ul
        %li Create a calculator on your page via html and css only 
        %li Power it with a back-end javascript that when a button is pushed, it sends an ajax request to an API. It should send along with the request, some indication of what button was pushed (hint: maybe it grabs an id value from the HTML)
        %li Write an API that servers a single numbers and strings that correspond to all the buttons available on a simple scientific calculator
        %li When the API returns a value, the calculator should store it as a variable
        %li 
          When valid calculable expression has been enetered, you have two options:
          %ul
            %li The calculator can evalate the expression and display it to the screen. (Easy)
            %li The calculator can send every part of the expression back to the API to get evaluated and then returned to be displayed on the screen. (Hard)
        %li Host the Rails calculator on Heroku
        %li Host the Rails calculator API on EC2
      %p Some notes and things to keep in mind:
      %ul
        %li The clear button the calculator should work
        %li To complete this challenge, only 2 number expressions need be done
        %li Props if you can support alternate inputs (i.e. 3 2 + to get 5)
      %p Resources:
      %ul
        %li= link_to "The Rails API Gem", "http://railscasts.com/episodes/348-the-rails-api-gem"
        %li= link_to "Hosting on EC2", "http://railscasts.com/episodes/347-rubber-and-amazon-ec2"
        %li= link_to "Learn jQuery", "http://jquery.com/"
        %li= link_to "Larn AJAX in jQuery", "http://learn.jquery.com/ajax/"
        %li= link_to "The asset pipeline", "http://guides.rubyonrails.org/asset_pipeline.html"
      %p Results will be posted through a series screencasts.

  %section.solution.clearfix
    %h3.challenge-solution Solution videos

= render 'footer'